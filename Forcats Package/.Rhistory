ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes( fct_reorder(f= model,x=mpg))) +
geom_point() +
labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mpg, fct_reorder(y= model,x=mpg))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mpg, fct_reorder(f= model,x=mpg,min))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg,min))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mtcars$mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg,min))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes( fct_reorder(f= mtcars$model,x=mtcars$mpg,min))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg,min))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mtcars$mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mtcars$mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mtcars$mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(ggplot2)
library(plotly)
library(forcats)
data(mtcars)
#fct_reorder takes three arguments: f = factor you want to reorder, x = the variable in which the order will be based upon, and optionally fun (a function to  be used if there are multiple values of x for each value of f.) Here we focus on only the first two arguments.
ggplot(mtcars, aes(mtcars$mpg, fct_reorder(f= mtcars$model,x=mtcars$mpg))) +
geom_point() + labs(y = "model") +
ggtitle(label = "We can make better comparison by reordering the levels based on the mpg values!") +
theme(plot.title = element_text(size = 10, face = 'bold'))
library(tidyverse)
library(purrr)
library(gapminder)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,lenght(n))
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in 1000){
x<-sample(pop,i)
m1(i)<-mean(x)
}
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in 1000){
x<-sample(pop,i)
m1<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in 1000){
x<-sample(pop,1)
m1(i)<-mean(x)
}
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in 1000){
x<-sample(pop,1)
m1<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in 1000){
x<-sample(pop,1)
m1<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,1)
m1<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1(i)<-mean(x)
}
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1(i)<-mean(x)
}
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1:1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1(i)<-mean(x)
}
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1:1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1[i]<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1:1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1[i]<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
pop<-rnorm(10000)
n<-1:1000
m1<-rep(NA,length(n))
#using for loops
for(i in n){
x<-sample(pop,i)
m1[i]<-mean(x)
}
plot(m1,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
#x is a list or atomic vector
m2<-map(n,~sample(pop,.x))
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
#x is a list or atomic vector
m2<-map(n,~sample(pop,.x))
head(m2) # This is a list
m2<-map(n,~sample(pop,.x))%>%
map(~mean(.x))
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
#x is a list or atomic vector
m2<-map(n,~sample(pop,.x))
head(m2) # This is a list
m2<-map(n,~sample(pop,.x))%>%
map(~mean(.x))
head(m2) # This gives a list
m2<-map(n,~sample(pop,.x))%>%
map_df(~mean(.x))
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
#x is a list or atomic vector
m2<-map(n,~sample(pop,.x))
head(m2) # This is a list
m2<-map(n,~sample(pop,.x))%>%
map(~mean(.x))
head(m2) # This gives a list
m2<-map(n,~sample(pop,.x))%>%
map_dbl(~mean(.x))
head(m2)
plot(m2,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m1<-data.frame(n=numeric(1000),mean=numeric(1000),sd=numeric(1000))
for(i in n){
x<-sample(pop,i)
m1[i,]<-list(i,mean(x),sd(x))
}
plot(m1$n,m1$mean,type="l")
plot(m1$n,m1$sd,type="l")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m1<-data.frame(n=numeric(1000),mean=numeric(1000),sd=numeric(1000))
for(i in n){
x<-sample(pop,i)
m1[i,]<-list(i,mean(x),sd(x))
}
plot(m1$n,m1$mean,type="l",col="blue")
plot(m1$n,m1$sd,type="l",col="red")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)),id="n")
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x),id="n"))
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)),id="n")
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x),id="n"))
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x),id="n"))
head(m2)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x),id="n"))
head(m2)
plot(m2$n,m2$sd,type="l",col="blue")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can add .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x),.id="n"))
head(m2)
plot(m2$n,m2$sd,type="l",col="blue")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)))
head(m2)
#you can add .id
m2<-map(n,~sample(pop,.x))%>%
map_df(~data.frame(mean=mean(.x),sd=sd(.x)),.id="n")
head(m2)
plot(m2$n,m2$sd,type="l",col="blue")
plot(m2$n,m2$mean,type="l",col="red")
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
data(gapminder)
head(gapminder,15)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
data(gapminder)
head(gapminder,15)
#model
f1<-lifeExp~pop
f2<-lifeExp~gdpPercap
f3<-lifeExp~pop+gdpPercap
f4<-lifeExp~pop+gdpPerCap+year
f5<-lifeExp~pop+gdpPercap+year+continent
m1<-lm(f1,data=gapminder)
m2<-lm(f2,data=gapminder)
m3<-lm(f3,data=gapminder)
m4<-lm(f4,data=gapminder)
#load libraries
library(tidyverse)
library(gapminder)
library(purrr)
library(dplyr)
data(gapminder)
head(gapminder,15)
#model
f1<-lifeExp~pop
f2<-lifeExp~gdpPercap
f3<-lifeExp~pop+gdpPercap
f4<-lifeExp~pop+gdpPercap+year
f5<-lifeExp~pop+gdpPercap+year+continent
m1<-lm(f1,data=gapminder)
m2<-lm(f2,data=gapminder)
m3<-lm(f3,data=gapminder)
m4<-lm(f4,data=gapminder)
m5<-lm(f5,data=gapminder)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
summary(m5)
#if we want the best model
AIC(m1,m2,m3,m4,m5)
